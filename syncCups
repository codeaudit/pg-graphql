#!/usr/bin/env node

import {web3, db, sql, config, util} from './lib/common'
const abi = require('./abi/tub.json').abi
const tub = new web3.eth.Contract(abi, config.addresses.tub);

const syncRange = (from, to) => {
  console.log("SyncRange: "+from+" - "+to);
  let options = {
    fromBlock: from,
    toBlock: to,
    filter: {sig: config.acts.sigs}
  }
  tub.getPastEvents('LogNote', options)
  .then(logs => logs.forEach(log => {
    syncCup(log)
  }))
  .catch(e => console.log(e));
}

const syncCup = (log) => {
  tub.methods.cups(log.returnValues.foo).call({}, log.blockNumber).then(cup => {
    let cupv = {
      id: web3.utils.hexToNumber(log.returnValues.foo),
      lad: cup.lad,
      ink: util.wad(cup.ink),
      art: util.wad(cup.art),
      ire: util.wad(cup.irk),
      act: config.acts.acts[log.returnValues.sig],
      arg: util.wad('0x'+log.returnValues.bar.substring(26)),
      block: log.blockNumber,
      tx: log.transactionHash
    }
    insertCup(cupv)
  });
}

const insertCup = (cup) => {
  db.none(sql.insertCup, {cup: cup}).then(() => console.log(cup));
}

const syncCups = (earliest, latest) => {
  let step = 2000;
  while(latest > earliest) {
    let from = latest-step;
    syncRange(from, latest)
    latest = from;
  }
}

syncCups(process.env.FROM_BLOCK, process.env.TO_BLOCK)

//web3.eth.getBlockNumber().then(n => syncCups(n))
