#!/usr/bin/env node

import web3 from './config/web3'
import {db,sql,pgp} from './config/db'
import {wad,getCupAt} from './utils'

const abi = require('./abi/tub.json').abi
const adr = require('./addresses.json').ethlive.tub;
const tub = new web3.eth.Contract(abi, adr);
const acts = require('./actions.js');

const insertCup = sql('insertCup.sql')

const options = {
  fromBlock: web3.utils.toHex(process.env.FROM_BLOCK),
  toBlock: web3.utils.toHex(process.env.TO_BLOCK)
}

tub.getPastEvents('LogNote', Object.assign(options, {filter: {sig: acts.sigs}}))
.then(logs => {
  logs.forEach(log => {
    web3.eth.getBlock(log.blockNumber).then(block => {
      getCupAt(log.returnValues.foo, log.blockNumber).then(rtn => {
        let cup = {
          id: web3.utils.hexToNumber(log.returnValues.foo),
          lad: rtn.lad,
          ink: rtn.ink,
          art: rtn.art,
          ire: rtn.ire,
          block: log.blockNumber,
          time: block.timestamp,
          tx: log.transactionHash,
          act: acts.acts[log.returnValues.sig],
          arg: wad('0x'+log.returnValues.bar.substring(26))
        }
        db.none(insertCup, {cup: cup}).then(() => {
          console.log(cup);
        });
      })
    });
  });
});

tub.getPastEvents('LogNewCup', options)
.then(logs => {
  logs.forEach(log => {
    web3.eth.getBlock(log.blockNumber).then(block => {
      let cup = {
        id: web3.utils.hexToNumber(log.returnValues.cup),
        lad: log.returnValues.lad,
        ink: 0,
        art: 0,
        ire: 0,
        block: log.blockNumber,
        time: block.timestamp,
        tx: log.transactionHash,
        act: 'open',
        arg: null
      }
      db.none(insertCup, {cup: cup}).then(() => {
        console.log(cup);
      });
    });
  });
});
