#!/usr/bin/env node

const lib = require('./lib/common');
const abi = require('./abi/med.json');
const pipMed = new lib.web3.eth.Contract(abi, lib.config.addresses.pip);
const pepMed = new lib.web3.eth.Contract(abi, lib.config.addresses.pep);

const syncBlock = (n) => {
  console.log("Sync: ", n);
  lib.web3.eth.getBlock(n)
  .then(rtn => writeBlock(n, rtn.timestamp))
  .catch(e => console.log);
}

async function writeBlock(n, timestamp) {
  pipMed.methods.peek().call({}, n)
  .then(pip => {
    pepMed.methods.peek().call({}, n)
    .then(pep => {
      let data = {
        n: n,
        time: timestamp,
        pip: lib.util.wad(pip[0]),
        pep: lib.util.wad(pep[0])
      }
      lib.db.none(lib.sql.insertBlock, data)
      .then(() => {})//console.log("Write:", data));
    })
    .catch(e => console.log);
  })
  .catch(e => console.log);
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function syncBlocks(from) {
  console.log("Latest Block:", from);
  await sleep(2000);
  for (from; from > 4753930; from--) {
    await sleep(200);
    syncBlock(from);
  }
}

lib.web3.eth.getBlockNumber().then(n => syncBlocks(n))

lib.web3.eth.subscribe('newBlockHeaders', function(e,r) {
  if (e)
    console.log(e)
})
.on("data", function(data) {
  console.log("New Header:", data);
  writeBlock({ n: n, time: data.timestamp });
});
